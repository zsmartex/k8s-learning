---
- name: Reload workspace vars
  ansible.builtin.include_vars:
    dir: "{{ workspace_group_vars_dir }}"
    ignore_unknown_extensions: true

- name: Handling first init variable propagation
  ansible.builtin.set_fact:
    vault_init_content: "{{ lookup('file', vault_local_unseal_file) | from_yaml }}"
  no_log: true
  when:
    - vault_init_content is not defined

- name: Wait for load balancer warm up
  ansible.builtin.uri:
    url: "{{ vault_api_protocol }}://{{ vault_api_address }}:{{ vault_api_port }}/v1/auth/token/lookup-self"
    headers:
      X-Vault-Token: "{{ vault_init_content.root_token }}"
  register: _vault_ping_api
  until: _vault_ping_api.status == 200
  retries: 2
  delay: 10
  delegate_to: localhost
  become: false
  run_once: true

- name: Create K8S Vault ServiceAccount
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: z-dax
        namespace: "{{ namespace }}"

- name: Copy terraform sources
  ansible.builtin.copy:
    src: "{{ __vault_terraform_module }}/"
    dest: "{{ __vault_terraform_module_work_dir }}/"
  delegate_to: localhost
  become: false
  run_once: true

- name: "Do Terraform"
  community.general.terraform:
    project_path: "{{ __vault_terraform_module_work_dir }}"
    state: "present"
    force_init: true
    provider_upgrade: true
    workspace: "{{ workspace }}"
    variables:
      postgresql_username: postgres
      postgresql_password: "{{ postgresql_init_content.users.postgres }}"
      postgresql_host: "{{ service_names.postgresql }}"
      postgresql_port: 5432
      kubernetes_host: "{{ kubernetes.host }}"
      kubernetes_ca_cert: "{{ lookup('file', kubernetes.ca_cert_file) }}"
      kubernetes_namespace: "{{ namespace }}"
  environment:
    VAULT_ADDR: "{{ vault_api_protocol }}://{{ vault_api_address }}:{{ vault_api_port }}"
    VAULT_TOKEN: "{{ vault_init_content.root_token }}"
  delegate_to: localhost
  become: false
  run_once: true
